{"version":3,"sources":["components/TreeStateInfoPanel.js","components/TreeSettingsPanel.js","components/NodeMenu.js","components/TreeIconControl.js","components/Tree.js","index.js"],"names":["TreeStateInfoPanel","state","isOpenRelationCard","RelationCardLoading","relationInfo","revokeCutNode","props","cutNode","onTreeSettingChange","cutNode_node","cutNode_dom","d3","classed","data","dom","message","success","revokeCopyNode","copyNode","this","onRef","cur_treeData","infoBarVisible","treeNodeCount","treeDepth","stateData","title","content","icon","length","depth","className","style","display","size","headStyle","fontSize","fontWeight","bodyStyle","padding","extra","shape","CloseOutlined","onClick","dataSource","split","renderItem","item","Item","Meta","avatar","React","Component","TreeSettingPanel","handleCloseCard","e","setState","showSettingCard","handleOpenCard","onTabChange","key","type","handleChangeColor","color","value","hex","colorType","layoutSet","colorSet","nodeFocus","autoZoomTree","layoutSetList","name","min","max","step","nodeSpace","valueName","nodeSize","linkLength","linkWidth","labelSize","styleSetList","nodeColor","linkColor","switchBtnList","contentList","tab1","justify","map","set","Fragment","span","onChange","layoutType","marginTop","checked","tab2","gutter","disableAlpha","onChangeComplete","trigger","overlayClassName","backgroundColor","UnorderedListOutlined","tabList","tab","activeTabKey","tabBarExtraContent","SubMenu","Menu","NodeMenu","closeMenu","markClose","onCancelSelectNode","nodeMenuVisible","handleClick","isStartEdit","handleCreateNode","handleDelete_cur","handleDelete_curAndCild","handleUpdateNode","handleCutNode","handleCopy_cur","handleCopy_curAndCild","handlePasteNode","error","handleKeyDown","ctrlKey","indexOf","keyCode","preventDefault","onUndo","handleCancel","submitLoading","modalvisible","onReset","onAddFinish","newNodeInfo","_this","selectNode","node","description","onAddNode","_node","then","info","onUpdateFinish","onUpdateNode","formRef","current","resetFields","menuType","cilckType","createRef","menuTransform","top","left","editBtnPopVisible","isNoEditRole","newProps","newState","newContext","document","removeEventListener","addEventListener","prevProps","prevState","setFieldsValue","onRemoveNode","parent","delete_cur_mes","warning","setTimeout","onRemoveNodeAndChildren","delete_curAndCild_mes","onCutNode","cut_mes","_dom","onPasteNode","onCutPasteNode","onPasteNodeAndChildren","selectable","popupClassName","disabled","visible","onCancel","footer","labelCol","xs","sm","wrapperCol","ref","onFinish","label","rules","required","autoComplete","TextArea","rows","allowClear","offset","htmlType","marginRight","loading","TreeIconControl","handleCollapseAllNodes","getTreeRef","collapseAllElements","_data","update","onAutoNodeFouce","handleExpandAllNodes","expandAllElements","placement","ArrowsAltOutlined","ShrinkOutlined","Tree","initTree","_svgWidth","mainview","offsetWidth","_svgHeight","offsetHeight","_tree","_diagonal","x","d","y","_zoom","scaleExtent","on","zoomed","zoomended","_svg","append","attr","call","handleSvgClick","_svgTree","translateTo","initZoom","event","transformParam","transform","onContextmenu","nodeMenuRef","k","draggable","draggingTask","isCircleExpanded","dragObj","dx","dy","handleSelectNode","children","_children","selectAll","filter","n","isParent","transition","duration","target","line","createLink","historyEdit","e_this","clearTimeout","prevParentNode","index","splice","parent_id","id","descendants","forEach","setDepth","push","getTreeMaxDepth","concat","typeName","currentNode","prevTreeDepth","removeLink","_click","nodeName","cancelSelectNode","class","updateTreeDisplay","selected","selectChild","_getNodeRef","source","treeNodes","parentNode","_groups","__data__","handleRemoveNode","deletedNode","curChildrenRef","parentChildrenRef","preTreeNodeCount","preTreeDepth","child","handleRemoveNodeAndChildren","deleteNodesNum","getNodeChildren","handleAddNode","targetNode","addNodeInfo","a","country_id","state_id","newNode","Math","updateNode","prevNodeInfo","Object","assign","nodeInfo","handlePasteNodeAndChildren","copyNodesNum","maxDepth","newSubTree","newNodes","each","handleCutPasteNode","handleUndoDragOrCut","record","slice","handleUndoDeleteNode","updateChildren","objectChildren","parentChildren","handleUndoDeleteSubTree","deleteNodes","handleUndoAddOrCopyNode","handleUndoCopySubTree","handleUndoUpdateNode","handleUndo","lastOperation","handleTreeSettingChange","setType","JSON","parse","stringify","treeData","x0","y0","_duration","updateLink","lastTarget","treeRef","virtualContainer","treeNodesList","labelColor","onAutoZoomTree","action","nodes","links","console","log","getBBox","d_y","d_x","d_source_y","d_target_y","link","exit","o","remove","linkEnter","enter","insert","merge","upLoadClicktag","nodeEnter","linear","domain","range","compute","gamma","text","nodeExit","select","viewBox","pre_scale","width","height","next_scale","center_x","center_y","t","translate","scale","node_dom","src","tar","shortLine","nodeA","result","infoPanelRef","TreeSettingsPanel","root","countDepth","array","displayName","ReactDOM","render","china","getElementById"],"mappings":"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","file":"static/js/main.386b4727.chunk.js","sourcesContent":["import React from 'react'\r\nimport * as d3 from 'd3'\r\nimport { message, Card, List, Button} from 'antd'\r\nimport { CloseOutlined} from '@ant-design/icons'\r\nimport './treeStateInfo.css'\r\nclass TreeStateInfoPanel extends React.Component {\r\n    state = {\r\n        isOpenRelationCard: false,\r\n        RelationCardLoading: false,\r\n        relationInfo: null\r\n    };\r\n    componentDidMount() {\r\n        this.props.onRef(this);\r\n    }\r\n    revokeCutNode = () => {\r\n        const { cutNode, onTreeSettingChange } = this.props,\r\n            { cutNode_node, cutNode_dom } = cutNode\r\n        if (cutNode_node) {\r\n            d3.select(cutNode_dom).classed('cutting', false);\r\n            onTreeSettingChange({ data: null, dom: null }, \"cutNode\")\r\n            message.success('取消剪切!');\r\n        }\r\n    }\r\n    revokeCopyNode = () => {\r\n        const { copyNode, onTreeSettingChange } = this.props\r\n        if (copyNode) {\r\n            onTreeSettingChange(null, \"copyNode\")\r\n            message.success('取消复制!');\r\n        }\r\n    }\r\n    render() {\r\n        const { cur_treeData, infoBarVisible, treeNodeCount, treeDepth, onTreeSettingChange } = this.props\r\n        const stateData = [\r\n            { title: '节点总数: ', content: treeNodeCount ? treeNodeCount : '', icon: null },\r\n            { title: '总层次: ', content: treeDepth ? treeDepth + 1 : '', icon: null },\r\n            { title: '当前节点数: ', content: cur_treeData.length, icon: null },\r\n            { title: '当前层次: ', content: cur_treeData.length > 0 ? cur_treeData[cur_treeData.length - 1].depth + 1 : '', icon: null },\r\n        ]\r\n        return (\r\n            <Card\r\n                className=\"treeStateInfo\"\r\n                style={infoBarVisible ? { display: 'block' } : { display: 'none' }}\r\n                title=\"统计信息\"\r\n                size=\"small\"\r\n                headStyle={{ fontSize: \"16px\", fontWeight: 'bold' }} bodyStyle={{ padding: \"6px 0\" }}\r\n                extra={<Button shape=\"circle\" size=\"small\" icon={<CloseOutlined />} onClick={() => onTreeSettingChange(null, \"infoBarVisible\")}></Button>}>\r\n                <List\r\n                    size=\"small\"\r\n                    dataSource={stateData}\r\n                    split={false}\r\n                    renderItem={item => {\r\n                        return (\r\n                            <>\r\n                                <List.Item className=\"treeStateInfo-list-item\" >\r\n                                    <List.Item.Meta\r\n                                        avatar={item.title + item.content}\r\n                                    />\r\n                                    {item.icon}\r\n                                </List.Item>\r\n                            </>\r\n                        )\r\n                    }\r\n\r\n                    }\r\n                />\r\n\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeStateInfoPanel;","import React from 'react';\r\nimport { Button, Card, Row, Col, Slider, InputNumber, Popover, Switch } from 'antd';\r\nimport { UnorderedListOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport { ChromePicker } from 'react-color'\r\nimport './treeSettingsPanel.css';\r\n// 图谱控制面板\r\nclass TreeSettingPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showSettingCard: false, // 显示隐藏控制面板\r\n            key: 'tab1', // 标签页索引\r\n        };\r\n    }\r\n    handleCloseCard = (e) => {\r\n        this.setState({ showSettingCard: false })\r\n    }\r\n    handleOpenCard = (e) => {\r\n        this.setState({ showSettingCard: true });\r\n    }\r\n    onTabChange = (key, type) => {\r\n        this.setState({ [type]: key });\r\n    }\r\n    handleChangeColor = (color, type) => {\r\n        this.props.onTreeSettingChange({ value: color.hex, colorType: type }, \"colorSet\")\r\n    }\r\n    render() {\r\n        const { showSettingCard, key } = this.state\r\n        const { layoutSet, colorSet, nodeFocus, autoZoomTree, infoBarVisible, onTreeSettingChange } = this.props\r\n        const tabList = [{ key: 'tab1', tab: '布局设置' }, { key: 'tab2', tab: \"样式设置\" }]\r\n        const layoutSetList = [\r\n            { name: \"节点间距\", min: 0, max: 100, step: 1, value: layoutSet.nodeSpace, valueName: \"nodeSpace\" },\r\n            { name: \"节点大小\", min: 1, max: 30, step: 1, value: layoutSet.nodeSize, valueName: \"nodeSize\" },\r\n            { name: \"边长度\", min: 0, max: 1000, step: 10, value: layoutSet.linkLength, valueName: \"linkLength\" },\r\n            { name: \"边宽度\", min: 0.5, max: 10, step: 0.5, value: layoutSet.linkWidth, valueName: \"linkWidth\" },\r\n            { name: \"标签大小\", min: 1, max: 30, step: 1, value: layoutSet.labelSize, valueName: \"labelSize\" },\r\n        ]\r\n        const styleSetList = [\r\n            { name: \"节点轮廓颜色\", value: colorSet.nodeColor, valueName: \"nodeColor\" },\r\n            { name: \"边颜色\", value: colorSet.linkColor, valueName: \"linkColor\" },\r\n        ]\r\n        const switchBtnList = [\r\n            { name: \"节点跟踪聚焦\", value: nodeFocus, valueName: \"nodeFocus\" },\r\n            { name: \"自适应缩放\", value: autoZoomTree, valueName: \"autoZoomTree\" },\r\n            { name: \"统计信息栏\", value: infoBarVisible, valueName: \"infoBarVisible\" },\r\n        ]\r\n        const contentList = {\r\n            tab1: <div>\r\n                <Row  justify=\"space-between\">\r\n                    {\r\n                        layoutSetList.map((set) => {\r\n                            return (\r\n                                <React.Fragment key={set.valueName}>\r\n                                    <Col span={24} className=\"tree-settings-title\">{set.name}</Col>\r\n                                    <Col span={17}>\r\n                                        <Slider min={set.min} max={set.max} step={set.step} value={set.value} onChange={value => { onTreeSettingChange({ value: value, layoutType: set.valueName }, \"layoutSet\") }} />\r\n                                    </Col>\r\n                                    <Col span={6}>\r\n                                        <InputNumber min={set.min} max={set.max} step={set.step} value={set.value} onChange={value => { onTreeSettingChange({ value: value, layoutType: set.valueName }, \"layoutSet\") }} />\r\n                                    </Col>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n                {\r\n                    switchBtnList.map(set => {\r\n                        return (\r\n                            <Row style={{ marginTop: '16px' }} justify=\"space-between\" key={set.valueName} >\r\n                                <Col className=\"tree-settings-title\" span={17}>\r\n                                    {set.name}\r\n                                </Col>\r\n                                <Col span={6}>\r\n                                    <Switch checked={set.value} onChange={value => onTreeSettingChange(value, set.valueName)} />\r\n                                </Col>\r\n                            </Row>\r\n                        )\r\n                    })\r\n                }\r\n            </div>,\r\n            tab2: <div>\r\n                <Row gutter={[0, 16]} justify=\"space-between\" >\r\n                    {\r\n                        styleSetList.map((set) => {\r\n                            return (\r\n                                <React.Fragment key={set.valueName}>\r\n                                    <Col className=\"tree-settings-title\" span={17}>\r\n                                        {set.name}\r\n                                    </Col>\r\n                                    <Col span={6}>\r\n                                        <Popover content={<ChromePicker color={set.value} disableAlpha={true} onChangeComplete={color => this.handleChangeColor(color, set.valueName)} />} trigger=\"click\" overlayClassName=\"site-antd-popover\">\r\n                                            <span className=\"tree-settings-colorBox\" style={{ backgroundColor: set.value }}></span>\r\n                                        </Popover>\r\n                                    </Col>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            </div>\r\n        }\r\n        return (\r\n            <>\r\n                <Button className=\"tree-settings-btn\" shape=\"circle\" size=\"large\" onClick={this.handleOpenCard} icon={<UnorderedListOutlined />} />\r\n                <Card\r\n                    size=\"small\"\r\n                    className=\"tree-settings-card\"\r\n                    style={showSettingCard ? { display: 'block' } : { display: 'none' }}\r\n                    bodyStyle={{ padding: \"15px\" }}\r\n                    tabList={tabList}\r\n                    activeTabKey={key}\r\n                    tabBarExtraContent={<Button shape=\"circle\" icon={<CloseOutlined />} onClick={this.handleCloseCard}></Button>}\r\n                    onTabChange={key => {\r\n                        this.onTabChange(key, 'key');\r\n                    }}>\r\n                    {contentList[this.state.key]}\r\n                </Card>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeSettingPanel;","import React from 'react';\r\nimport './menu.css'\r\nimport { Menu, message, Modal, Button, Form, Input } from 'antd'\r\nconst { SubMenu } = Menu;\r\n\r\nclass NodeMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.menuType = null; // 菜单处理类型add / update\r\n        this.cilckType = null; // 点击菜单触发事件类型 cut/ copy_cur /copy_curAndCild\r\n        this.formRef = React.createRef()\r\n        this.isStartEdit = true // 编辑使能\r\n        this.state = {\r\n            modalvisible: false, // 表单显隐\r\n            submitLoading: false, // 表单提交请求状态\r\n            nodeMenuVisible: false, // 菜单显隐\r\n            menuTransform: {\r\n                top: null,\r\n                left: null\r\n            },\r\n            editBtnPopVisible: false,\r\n            isNoEditRole: true\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.onRef)\r\n            this.props.onRef(this);\r\n    }\r\n    UNSAFE_componentWillUpdate(newProps, newState, newContext) {\r\n        // state更新前,执行\r\n        // 显示右键菜单，则取消监听快捷键\r\n        if (newState.nodeMenuVisible) {\r\n            document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n        } else {\r\n            document.addEventListener(\"keydown\", this.handleKeyDown);\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // state更新后,执行\r\n        const { modalvisible } = this.state,\r\n            { selectNode } = this.props\r\n        if (!prevState.modalvisible && modalvisible && this.menuType === 'update') {\r\n            this.formRef.current.setFieldsValue(selectNode._node.data)\r\n        }\r\n\r\n    }\r\n    // 隐藏菜单\r\n    closeMenu = (markClose) => {\r\n        const { onCancelSelectNode } = this.props\r\n\r\n        this.setState({ nodeMenuVisible: false })\r\n        if (markClose) {\r\n            onCancelSelectNode()\r\n        }\r\n    }\r\n    // 新增节点\r\n    handleCreateNode() {\r\n        const { selectNode } = this.props\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        }\r\n        this.menuType = \"create\"\r\n        this.setState({ modalvisible: true })\r\n    }\r\n    // 删除当前节点\r\n    handleDelete_cur() {\r\n        const { selectNode, onRemoveNode } = this.props\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能删除国家根节点');\r\n            return;\r\n        }\r\n        const delete_cur_mes = message.warning(<> 是否删除该节点? <div style={{ padding: \"12px 0 4px\" }}><Button size=\"small\" onClick={cancelDeleteNode}>取消 </Button> <Button type=\"primary\" size=\"small\" onClick={confirmDeleteNode}>确定 </Button></div> </>, 0);\r\n        function cancelDeleteNode() {\r\n            setTimeout(delete_cur_mes, 1)\r\n        }\r\n        function confirmDeleteNode() {\r\n            onRemoveNode(selectNode._node)\r\n            setTimeout(delete_cur_mes, 1)\r\n        }\r\n    }\r\n    // 删除当前节点及其子节点\r\n    handleDelete_curAndCild() {\r\n        const { selectNode, onRemoveNodeAndChildren } = this.props\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能删除国家根节点');\r\n            return;\r\n        }\r\n        const delete_curAndCild_mes = message.warning(<> 是否删除节点及其子节点? <div style={{ padding: \"12px 0 4px\" }}><Button size=\"small\" onClick={cancelDeleteNodes}>取消 </Button> <Button type=\"primary\" size=\"small\" onClick={confirmDeleteNodes}>确定 </Button></div> </>, 0);\r\n        function cancelDeleteNodes() {\r\n            setTimeout(delete_curAndCild_mes, 1)\r\n        }\r\n        function confirmDeleteNodes() {\r\n            onRemoveNodeAndChildren(selectNode._node)\r\n            setTimeout(delete_curAndCild_mes, 1)\r\n        }\r\n    }\r\n    // 获取表单节点信息\r\n    handleUpdateNode() {\r\n        const { selectNode } = this.props;\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能修改国家根节点');\r\n            return;\r\n        }\r\n        this.menuType = \"update\"\r\n        this.setState({ modalvisible: true })\r\n    }\r\n    // 剪切节点\r\n    handleCutNode() {\r\n        const { selectNode, onCutNode } = this.props,\r\n            _this = this;\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能剪切国家根节点');\r\n            return;\r\n        }\r\n        const cut_mes = message.warning(<> 是否剪切节点? <br /> 提示: 统计信息栏可取消剪切状态<div style={{ padding: \"12px 0 4px\" }}><Button size=\"small\" onClick={cancelCut}>取消 </Button> <Button type=\"primary\" size=\"small\" onClick={confirmCut}>确定 </Button></div> </>, 0);\r\n        function cancelCut() {\r\n            setTimeout(cut_mes, 1)\r\n        }\r\n        function confirmCut() {\r\n            setTimeout(cut_mes, 1)\r\n            onCutNode(selectNode._node, selectNode._dom)\r\n            message.success('节点已加入剪切板!');\r\n            _this.cilckType = \"cut\"\r\n        }\r\n    }\r\n    // 复制当前节点\r\n    handleCopy_cur() {\r\n        const { selectNode, onTreeSettingChange } = this.props\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能删除国家根节点');\r\n            return;\r\n        }\r\n        this.cilckType = \"copy_cur\"\r\n        onTreeSettingChange(selectNode._node, \"copyNode\")\r\n        message.success('已复制节点!');\r\n    }\r\n    // 复制节点及其子节点\r\n    handleCopy_curAndCild() {\r\n        const { selectNode, onTreeSettingChange } = this.props\r\n        if (!selectNode) {\r\n            message.error('请先选中节点');\r\n            return;\r\n        } else if (selectNode._node.parent === null) {\r\n            message.error('不能删除国家根节点');\r\n            return;\r\n        }\r\n        onTreeSettingChange(selectNode._node, \"copyNode\")\r\n        message.success('已复制节点!');\r\n        this.cilckType = \"copy_curAndCild\"\r\n    }\r\n    // 粘贴节点\r\n    handlePasteNode() {\r\n        const { selectNode, copyNode, cutNode, onPasteNode, onCutPasteNode, onPasteNodeAndChildren } = this.props\r\n\r\n        if (!copyNode && !cutNode.cutNode_node) {\r\n            message.error('请先复制/剪切节点');\r\n            return;\r\n        }\r\n        if (this.cilckType === \"copy_cur\") {\r\n            onPasteNode(selectNode._node, copyNode)\r\n        } else if (this.cilckType === \"copy_curAndCild\") {\r\n            onPasteNodeAndChildren(selectNode._node, copyNode)\r\n        } else if (this.cilckType === \"cut\") {\r\n            onCutPasteNode(selectNode._node, cutNode)\r\n        }\r\n    }\r\n    // 单击事件\r\n    handleClick = (e) => {\r\n        this.closeMenu()\r\n        if (this.isStartEdit) {\r\n            switch (e.key) {\r\n                // 新建节点\r\n                case 'create':\r\n                    this.handleCreateNode()\r\n                    break;\r\n                // 删除节点\r\n                case 'delete_cur':\r\n                    this.handleDelete_cur()\r\n                    break;\r\n                // 删除节点及其子节点\r\n                case 'delete_curAndCild':\r\n                    this.handleDelete_curAndCild()\r\n                    break;\r\n                // 修改节点\r\n                case 'update':\r\n                    this.handleUpdateNode()\r\n                    break;\r\n                // 剪切节点\r\n                case 'cut':\r\n                    this.handleCutNode()\r\n                    break;\r\n                // 复制当前节点\r\n                case 'copy_cur':\r\n                    this.handleCopy_cur()\r\n                    break;\r\n                // 复制当前节点及其子节点\r\n                case 'copy_curAndCild':\r\n                    this.handleCopy_curAndCild()\r\n                    break;\r\n                // 粘贴节点\r\n                case 'paste':\r\n                    this.handlePasteNode()\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            message.error(\"暂不支持编辑！\")\r\n        }\r\n    }\r\n    // 快捷键事件\r\n    handleKeyDown = (e) => {\r\n        if (e.ctrlKey && [65, 75, 77, 88, 67, 86, 90].indexOf(e.keyCode) !== -1) {\r\n            e.preventDefault()\r\n\r\n            if (this.isStartEdit) {\r\n                switch (e.keyCode) {\r\n                    case 65:\r\n                        // ctrl+a 新增\r\n                        this.handleCreateNode()\r\n                        break;\r\n                    case 75:\r\n                        // ctrl+k 删除节点\r\n                        this.handleDelete_cur()\r\n                        break;\r\n                    case 77:\r\n                        // ctrl +m 修改节点\r\n                        this.handleUpdateNode()\r\n                        break;\r\n                    case 88:\r\n                        // ctrl+x 剪切\r\n                        this.handleCutNode()\r\n                        break;\r\n                    case 67:\r\n                        // ctrl+c 复制当前节点\r\n                        this.handleCopy_cur()\r\n                        break;\r\n                    case 86:\r\n                        // ctrl+v 粘贴\r\n                        this.handlePasteNode()\r\n                        break;\r\n                    case 90:\r\n                        // ctrl+z 撤回历史编辑操作\r\n                        this.props.onUndo()\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            } else {\r\n                message.error(\"暂不支持编辑！\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // 取消表单弹窗\r\n    handleCancel = () => {\r\n        this.setState({ submitLoading: false, modalvisible: false })\r\n        this.onReset()\r\n    }\r\n    // 表单新增节点\r\n    onAddFinish = (newNodeInfo) => {\r\n        let _this = this\r\n        const { selectNode } = _this.props\r\n        _this.setState({ submitLoading: true })\r\n        const node = {\r\n            name: newNodeInfo.name,\r\n            description: newNodeInfo.description\r\n        }\r\n        this.props.onAddNode(selectNode._node, node).then(info => {\r\n            if (info) {\r\n                _this.setState({ submitLoading: false, modalvisible: false })\r\n                _this.onReset()\r\n                message.success('新增节点成功!');\r\n            }\r\n\r\n        })\r\n    };\r\n    // 表单更新\r\n    onUpdateFinish = (newNodeInfo) => {\r\n        let _this = this\r\n        const { selectNode } = _this.props\r\n        _this.setState({ submitLoading: true })\r\n        this.props.onUpdateNode(newNodeInfo, selectNode._node).then(info => {\r\n            if (info) {\r\n                _this.setState({ submitLoading: false, modalvisible: false })\r\n                _this.onReset()\r\n                message.success('更新节点成功!');\r\n            } else {\r\n                message.error('更新节点失败!');\r\n            }\r\n\r\n        })\r\n    };\r\n    // 重置表单内容\r\n    onReset = () => {\r\n        this.formRef.current.resetFields();\r\n    };\r\n    render() {\r\n        //editBtnPopVisible\r\n        const { modalvisible, submitLoading, nodeMenuVisible, menuTransform } = this.state\r\n        const { copyNode, cutNode } = this.props\r\n        return (\r\n            <>\r\n                <div className=\"menu\" style={nodeMenuVisible ? { display: 'block', top: menuTransform.top, left: menuTransform.left } : { display: 'none' }}>\r\n                    <div className=\"menu-mask\" onClick={() => { this.closeMenu(1); }}></div>\r\n                    <Menu className=\"menu-box\" onClick={this.handleClick} selectable={false}>\r\n                        <Menu.Item className=\"menu-item\" key=\"create\"  >新建节点 (ctrl+a)</Menu.Item>\r\n                        <SubMenu key=\"delete\" popupClassName=\"menu-item\" title=\"删除节点\">\r\n                            <Menu.Item className=\"subMenu-item\" key=\"delete_cur\">删除该节点 (ctrl+k)</Menu.Item>\r\n                            <Menu.Item className=\"subMenu-item\" key=\"delete_curAndCild\">删除该节点及其子节点</Menu.Item>\r\n                        </SubMenu>\r\n                        <Menu.Item className=\"menu-item menu-divider\" key=\"update\"  >修改节点 (ctrl+m)</Menu.Item>\r\n                        <Menu.Item className=\"menu-item\" key=\"cut\"  >剪切节点 (ctrl+x)</Menu.Item>\r\n                        <SubMenu key=\"copy\" popupClassName=\"menu-item\" title=\"复制节点\" >\r\n                            <Menu.Item className=\"subMenu-item\" key=\"copy_cur\">复制该节点 (ctrl+c)</Menu.Item>\r\n                            <Menu.Item className=\"subMenu-item\" key=\"copy_curAndCild\">复制该节点及其子节点</Menu.Item>\r\n                        </SubMenu>\r\n                        <Menu.Item className=\"menu-item\" key=\"paste\" disabled={copyNode || cutNode.cutNode_node ? false : true}  >粘贴节点 (ctrl+v)</Menu.Item>\r\n                    </Menu>\r\n                </div>\r\n                <Modal\r\n                    title={this.menuType === \"create\" ? \"新增目标\" : \"更新目标\"}\r\n                    visible={modalvisible}\r\n                    onCancel={this.handleCancel}\r\n                    footer={null}\r\n                >\r\n                    <Form\r\n                        name=\"basic\"\r\n                        labelCol={{\r\n                            xs: { span: 24 },\r\n                            sm: { span: 6 },\r\n                        }}\r\n                        wrapperCol={{\r\n                            xs: { span: 24 },\r\n                            sm: { span: 16 },\r\n                        }}\r\n                        ref={this.formRef}\r\n                        onFinish={this.menuType === \"create\" ? this.onAddFinish : this.onUpdateFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"目标名字\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: '请输入目标名字!' }]}\r\n                        >\r\n                            <Input autoComplete=\"off\" />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"description\" label=\"目标信息\">\r\n                            <Input.TextArea rows={4} allowClear />\r\n                        </Form.Item>\r\n                        <Form.Item wrapperCol={{ offset: 6, span: 16 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: '8px' }} loading={submitLoading}>\r\n                                提交\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={this.onReset}>\r\n                                重置\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NodeMenu;\r\n\r\n\r\n","import React from 'react';\r\nimport { Button, Tooltip } from 'antd'\r\nimport { ShrinkOutlined, ArrowsAltOutlined } from '@ant-design/icons';\r\nimport './TreeIconControl.css'\r\nclass TreeIconControl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n    // 收缩所有节点\r\n    handleCollapseAllNodes = () => {\r\n        const { getTreeRef } = this.props\r\n        getTreeRef.collapseAllElements(getTreeRef._data)\r\n        getTreeRef.update(getTreeRef._data, \"collapseAllElements\")\r\n        setTimeout(() => {\r\n            getTreeRef.onAutoNodeFouce(getTreeRef._data)\r\n        }, 500);\r\n    }\r\n    // 扩展所有节点\r\n    handleExpandAllNodes = () => {\r\n        const { getTreeRef } = this.props\r\n        getTreeRef.expandAllElements(getTreeRef._data)\r\n        getTreeRef.update(getTreeRef._data, \"expandAllElements\")\r\n        // setTimeout(() => {\r\n        //     getTreeRef.onAutoZoomTree();\r\n        // }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TreeIconControl\">\r\n                <Tooltip placement=\"left\" title=\"扩展所有节点\">\r\n                    <Button className=\"TreeIconControl-icon\" shape=\"circle\" onClick={this.handleExpandAllNodes} icon={<ArrowsAltOutlined />} />\r\n                </Tooltip>\r\n                <Tooltip placement=\"left\" title=\"收缩所有节点\">\r\n                    <Button className=\"TreeIconControl-icon\" shape=\"circle\" onClick={this.handleCollapseAllNodes} icon={<ShrinkOutlined />} />\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeIconControl;","import React from 'react';\r\nimport { message } from 'antd'\r\nimport './tree.css';\r\nimport * as d3 from 'd3'\r\nimport TreeStateInfoPanel from './TreeStateInfoPanel'\r\nimport TreeSettingsPanel from './TreeSettingsPanel'\r\nimport NodeMenu from './NodeMenu'\r\nimport TreeIconControl from './TreeIconControl'\r\nclass Tree extends React.Component {\r\n    static displayName = 'Tree';\r\n    constructor(props) {\r\n        super(props);\r\n        this._data = d3.hierarchy(JSON.parse(JSON.stringify(this.props.treeData)));\r\n        this._tree = d3.tree();\r\n        this._data.x0 = 0;\r\n        this._data.y0 = 0;\r\n        this._svg = null;\r\n        this._svgTree = null;\r\n        this._zoom = d3.zoom();\r\n        this._duration = 450;\r\n        this._diagonal = null; // 边位置\r\n        this.mainview = React.createRef(); // 绑定div容器Dom\r\n        this._svgWidth = null;  // svg宽度\r\n        this._svgHeight = null; // svg高度\r\n        this.updateLink = null;\r\n        this.updateNode = null;\r\n        this.initZoom = true;\r\n        this.dragObj = {\r\n            // 拖拽时的节点\r\n            current: null,\r\n            // 拖拽时，所依附的目标节点\r\n            target: null,\r\n            // 最后一次可拖拽到目标的目标节点\r\n            lastTarget: null,\r\n            /**\r\n             * 连线的起点和终点\r\n             */\r\n            line: [[0, 0], [0, 0]],\r\n        };\r\n        this.transformParam = {\r\n            k: 1,\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        this.nodeMenuRef = null; // nodeMenu的react\r\n        this.treeRef = null;\r\n        this.virtualContainer = d3.create('virtualContainer');\r\n        const treeNodesList = this._data.descendants()\r\n        this.state = {\r\n            cur_treeData: [],\r\n            selectNode: null, // 选中节点 {_node: , _dom:}\r\n            layoutSet: {\r\n                nodeSpace: 50,\r\n                linkLength: 400,\r\n                nodeSize: 10,\r\n                linkWidth: 1,\r\n                labelSize: 15,\r\n            },\r\n            colorSet: {\r\n                nodeColor: \"#ee8f44\",\r\n                linkColor: \"#ccc\",\r\n                labelColor: \"#000\",\r\n            },\r\n            nodeFocus: true,\r\n            autoZoomTree: false,\r\n            infoBarVisible: true,\r\n            copyNode: null,\r\n            cutNode: {\r\n                cutNode_node: null,\r\n                cutNode_dom: null\r\n            },\r\n            treeNodeCount: treeNodesList.length,\r\n            treeDepth: treeNodesList.slice(-1)[0].depth,\r\n            historyEdit: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        // 渲染后\r\n        this.treeRef = this\r\n        this.initTree()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // dom渲染后 state更新后,执行\r\n        const { layoutSet, colorSet, autoZoomTree } = this.state\r\n        if (layoutSet !== prevState.layoutSet) {\r\n            if (layoutSet.linkLength !== prevState.layoutSet.linkLength ||\r\n                layoutSet.nodeSpace !== prevState.layoutSet.nodeSpace ||\r\n                layoutSet.nodeSize !== prevState.layoutSet.nodeSize) {\r\n                this._tree.nodeSize([2 * layoutSet.nodeSize + 1 + layoutSet.nodeSpace, 70])\r\n                this.update()\r\n                if (layoutSet.nodeSize !== prevState.layoutSet.nodeSize) {\r\n                    this.updateTreeDisplay()\r\n                }\r\n            } else {\r\n                this.updateTreeDisplay()\r\n            }\r\n        } else if (colorSet !== prevState.colorSet) {\r\n            this.updateTreeDisplay()\r\n        }\r\n        // 开启自动缩放\r\n        if (autoZoomTree !== prevState.autoZoomTree && autoZoomTree) {\r\n            this.onAutoZoomTree();\r\n        }\r\n    }\r\n\r\n    initTree = () => {\r\n        const { layoutSet } = this.state\r\n        // 获取当前窗口的宽高\r\n        this._svgWidth = this.mainview.current.offsetWidth\r\n        this._svgHeight = this.mainview.current.offsetHeight\r\n\r\n        // 初始化树布局\r\n        this._tree.nodeSize([2 * layoutSet.nodeSize + 1 + layoutSet.nodeSpace, 70])\r\n        this._diagonal = d3.linkHorizontal()  // 横向贝塞尔曲线：d3.linkHorizontal() 纵向贝塞尔曲线：d3.linkVertical()\r\n            .x(function (d) { return d.y; })  // 水平：d.y 垂直：d.x\r\n            .y(function (d) { return d.x; }); // 水平：d.x 垂直：d.y\r\n\r\n        // 缩放初始化\r\n        this._zoom.scaleExtent([0.1, 5]).on('zoom', this.zoomed).on('end', this.zoomended);\r\n\r\n        this.collapseAllElements(this._data)\r\n        this._svg = d3.select('.mainview')\r\n            .append(\"svg\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"height\", \"100%\")\r\n            .classed(\"svg-tree\", true)\r\n            .on('contextmenu', (e) => {\r\n                e.preventDefault();\r\n            })\r\n            .call(this._zoom)\r\n            .on('dblclick.zoom', null)\r\n            .on(\"click\", this.handleSvgClick);\r\n\r\n        this._svgTree = this._svg\r\n            .append(\"g\")\r\n            .attr(\"class\", \"svg-tree-content\");\r\n\r\n        this._zoom.translateTo(this._svg, -100, -(this._svgHeight / 2))\r\n        // 初始化结束\r\n        this.initZoom = false\r\n        this.update(this._data)\r\n\r\n    }\r\n    update(source, action) {\r\n        const { layoutSet, colorSet, autoZoomTree, treeDepth } = this.state\r\n        const treeData = this._tree(this._data)\r\n        let _this = this\r\n        let nodes = treeData.descendants();\r\n        let links = treeData.links();\r\n\r\n        this.setState({ cur_treeData: nodes })\r\n\r\n        console.log(d3.select('.svg-tree-content').node().getBBox())\r\n        // 为固定深度规格化。\r\n        nodes.forEach(d => {\r\n            d.y = (d.depth * layoutSet.linkLength);\r\n        });\r\n\r\n        // 过滤超出当前可视窗口的节点\r\n        nodes = nodes.filter(d => {\r\n            const d_y = d.x * _this.transformParam.k + _this.transformParam.y,\r\n                d_x = d.y * _this.transformParam.k + _this.transformParam.x;\r\n            if (d_y < 0 || d_y > _this._svgHeight || d_x < 0 || d_x > _this._svgWidth) {\r\n                return false\r\n            } else {\r\n                console.log(d, d_y);\r\n                return true\r\n            }\r\n        })\r\n        links = links.filter(d => {\r\n            const d_source_y = d.source.x * _this.transformParam.k + _this.transformParam.y,\r\n                d_target_y = d.target.x * _this.transformParam.k + _this.transformParam.y\r\n            if ((d_source_y < 0 && d_target_y < 0) || (d_source_y > _this._svgHeight && d_target_y > _this._svgHeight)) {\r\n                return false\r\n            } else {\r\n                return true\r\n            }\r\n        })\r\n\r\n\r\n        // 设置节点ID\r\n        let node = this._svgTree.selectAll(\"g.node\")\r\n            .data(nodes, d => d.data.id);\r\n\r\n        // 设置边ID\r\n        let link = this._svgTree.selectAll(\"path.link\")\r\n            .data(links, d => d.target.data.id);\r\n\r\n        //链接退出隐藏，转换到父节点的位置。\r\n        link.exit().transition()\r\n            .duration(this._duration)\r\n            .attr(\"d\", (d) => {\r\n                const o = {\r\n                    x: d.source.x,\r\n                    y: d.source.y\r\n                };\r\n                return this._diagonal({\r\n                    source: o,\r\n                    target: o\r\n                });\r\n            })\r\n            .remove();\r\n\r\n        // 在父对象的上一个位置添加任何新链接。\r\n        let linkEnter = link.enter()\r\n            .insert(\"path\", \"g\")\r\n            .attr(\"id\", d => d.target.data.id)\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"d\", (d) => {\r\n                let o = {}\r\n                if (!d.source.x0) {\r\n                    o = {\r\n                        x: d.source.x,\r\n                        y: d.source.y\r\n                    };\r\n                } else {\r\n                    o = {\r\n                        x: d.source.x0,\r\n                        y: d.source.y0\r\n                    };\r\n                }\r\n                return this._diagonal({\r\n                    source: o,\r\n                    target: o\r\n                });\r\n            })\r\n            .style(\"fill\", 'none')\r\n            .style(\"stroke\", d => d.target.class === \"found\" ? \"#ff4136\" : colorSet.linkColor)\r\n            .style(\"stroke-width\", d => d.target.class === \"found\" ? layoutSet.linkWidth * 2 : layoutSet.linkWidth)\r\n\r\n\r\n        // 过渡链接到目标节点位置。\r\n        this.updateLink = linkEnter.merge(link)\r\n\r\n        this.updateLink.transition()\r\n            .duration(this._duration)\r\n            .attr(\"d\", d3.linkHorizontal()\r\n                .x(d => d.y)\r\n                .y(d => d.x));\r\n\r\n\r\n        let upLoadClicktag = 0; // 控制点击的变量 防止多次点击\r\n        //在父节点的上一个位置添加新节点。\r\n        let nodeEnter = node.enter()\r\n            .append('g')\r\n            .attr(\"id\", d => d.data.id)\r\n            .attr(\"class\", function (d) {\r\n                if (d.selected) {\r\n                    // 重新绑定选择节点\r\n                    _this.setState({ selectNode: { _node: d, _dom: this } })\r\n                }\r\n                return \"node\"\r\n            })\r\n            .attr(\"transform\", (d) => {\r\n                if (d.parent !== null) {\r\n                    if (!d.parent.x0) {\r\n                        return \"translate(\" + (d.parent.y) + \",\" + (d.parent.x) + \")\";\r\n                    } else {\r\n                        return \"translate(\" + (d.parent.y0) + \",\" + (d.parent.x0) + \")\";\r\n                    }\r\n                } else {\r\n                    if (!d.y0) {\r\n                        return \"translate(\" + (d.y) + \",\" + (d.x) + \")\";\r\n                    } else {\r\n                        return \"translate(\" + (d.y0) + \",\" + (d.x0) + \")\";\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n            .on(\"click\", function (e, d) {\r\n                //第一次点击为true\r\n                if (upLoadClicktag === 0) {\r\n                    upLoadClicktag = 1;\r\n                    _this.handleSelectNode(d, this)\r\n                    _this._click(d)\r\n                    //300ms过后可以再次点击\r\n                    setTimeout(function () { upLoadClicktag = 0 }, 300);\r\n                }\r\n\r\n            })\r\n            .call(this.draggable())\r\n            // 添加mouseover事件\r\n            .on(\"mouseout\", () => {\r\n                // 添加浮层hidden样式，隐藏浮层\r\n                d3.select(\".node-tooltip\").classed(\"hidden\", true);\r\n            })\r\n            .on(\"contextmenu\", function (event, d) { // 显示右键节点菜单\r\n                _this.handleSelectNode(d, this)\r\n                _this.onContextmenu(event, d)\r\n            })\r\n\r\n        // 更新tree信息，并获取当前层次\r\n        // 设置节点颜色渐变\r\n        let linear = d3.scaleLinear().domain([0, treeDepth]).range([0, 1]),\r\n            compute = d3.interpolateRgb.gamma(2.2)(\"#0a1fba\", \"#D3BDEC\");\r\n\r\n        // \"#2c3e50\", \"#bdc3c7\" #640D8C\r\n        // 创建节点\r\n        nodeEnter\r\n            .append(\"circle\")\r\n            .attr(\"class\", \"node-circle\")\r\n            .attr(\"r\", d => d.selected ? layoutSet.nodeSize * 1.5 : layoutSet.nodeSize)\r\n            .style(\"stroke\", d => d.selected ? \"#EE1C25\" : colorSet.nodeColor)\r\n            .style(\"stroke-width\", d => d.selected ? 4 : d._children ? 2 : 0)\r\n            .style(\"fill\", d => d.class === \"found\" ? \"#ff4136\" : compute(linear(d.depth)));\r\n\r\n        // 创建拖拽缓冲区节点\r\n        nodeEnter.append('circle')\r\n            .attr('class', 'ghost-circle')\r\n            .attr('r', 0)\r\n            .on('mouseenter', function (event, d) {\r\n                if (_this.dragObj.current && d !== _this.dragObj.current && !_this.isParent(d) && _this.dragObj.current.parent !== d) {\r\n                    // 拖拽至目标节点上——节点加本文的g容器区域\r\n                    _this.dragObj.lastTarget = d;\r\n                    _this.dragObj.target = d;\r\n                    d3.select(this).classed('dragging-target', true);\r\n                }\r\n            })\r\n            .on('mouseleave', function (event, d) {\r\n                d3.select(this).classed('dragging-target', false);\r\n                _this.dragObj.target = null;\r\n                _this.removeLink();\r\n            });\r\n\r\n        // 创建文本\r\n        nodeEnter.append(\"text\")\r\n            .attr(\"x\", layoutSet.nodeSize + 4)\r\n            .attr(\"dy\", \"0.31em\")\r\n            .attr(\"text-anchor\", \"start\")\r\n            .style(\"font-size\", layoutSet.labelSize + \"px\")\r\n            .text((d) => d.data.name)\r\n\r\n        // 更新\r\n        this.updateNode = nodeEnter.merge(node)\r\n\r\n        // 将节点转换到新位置\r\n        this.updateNode.transition()\r\n            .duration(this._duration)\r\n            .attr(\"transform\", (d) => {\r\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\r\n            });\r\n\r\n\r\n        // 隐藏拖拽缓冲区\r\n        // updateNode.select('circle.ghost-circle')\r\n        //     .attr('r', 0)\r\n\r\n\r\n        // 将退出节点移动到父节点的位置。\r\n        let nodeExit = node.exit().transition()\r\n            .duration(this._duration)\r\n            .attr(\"transform\", (d) => {\r\n                if (d.parent !== null) {\r\n                    return \"translate(\" + d.parent.y + \",\" + d.parent.x + \")\";\r\n                } else {\r\n                    return \"translate(\" + d.y + \",\" + d.x + \")\";\r\n                }\r\n\r\n            })\r\n            .remove();\r\n\r\n        // 退出时，将节点圆的大小减小为0\r\n        nodeExit.select('circle')\r\n            .attr('r', 1e-6);\r\n\r\n        // 退出时减少文本标签的不透明度\r\n        nodeExit.select('text')\r\n            .style('fill-opacity', 1e-6);\r\n\r\n        //将旧位置隐藏起来，以便过渡。\r\n        nodes.forEach((d) => {\r\n            d.x0 = d.x;\r\n            d.y0 = d.y;\r\n        });\r\n\r\n        if (['remove', 'add', \"cut\", 'drag'].indexOf(action) !== -1) {\r\n            // 层次渐进\r\n            this.updateNode.select('.node-circle')\r\n                .style(\"fill\", d => compute(linear(d.depth)))\r\n                .style(\"stroke-width\", d => d.selected ? 4 : d._children ? 2 : 0);\r\n        } else if ([\"expandAllElements\", \"collapseAllElements\"].indexOf(action) !== -1) {\r\n            this.updateNode.select('.node-circle')\r\n                .style(\"stroke-width\", d => d._children ? 2 : 0);\r\n        }\r\n        // 自动缩放\r\n        if (autoZoomTree) {\r\n            setTimeout(() => {\r\n                this.onAutoZoomTree();\r\n            }, 500);\r\n        }\r\n    }\r\n    // 更新样式\r\n    updateTreeDisplay() {\r\n        const { colorSet, layoutSet, treeDepth } = this.state\r\n\r\n        this.updateLink\r\n            .style(\"stroke\", d => d.target.class === \"found\" ? \"#ff4136\" : colorSet.linkColor)\r\n            .style(\"stroke-width\", d => d.target.class === \"found\" ? layoutSet.linkWidth * 2 : layoutSet.linkWidth)\r\n\r\n        let linear = d3.scaleLinear().domain([0, treeDepth]).range([0, 1]),\r\n            compute = d3.interpolateRgb.gamma(2.2)(\"#0a1fba\", \"#D3BDEC\");\r\n        // 更新节点\r\n        this.updateNode.select('.node-circle')\r\n            .attr(\"r\", layoutSet.nodeSize)\r\n            .style(\"stroke\", colorSet.nodeColor)\r\n            .style(\"stroke-width\", d => d._children ? 2 : 0)\r\n            .style(\"fill\", d => d.class === \"found\" ? \"#ff4136\" : compute(linear(d.depth)));\r\n\r\n        // 更新文本\r\n        this.updateNode.select('text')\r\n            .attr(\"x\", layoutSet.nodeSize + 4)\r\n            .style(\"font-size\", layoutSet.labelSize + \"px\")\r\n            .text((d) => d.data.name)\r\n\r\n    }\r\n    zoomed = (event) => {\r\n        this._svgTree.attr('transform', this.transformParam = event.transform);\r\n    }\r\n    zoomended = (event) => {\r\n        // 拖拽结束动态显示节点\r\n        if (!this.initZoom) {\r\n            this.update()\r\n        }\r\n    }\r\n    // 缩放居中\r\n    onAutoZoomTree() {\r\n        const viewBox = this._svg.node().getBBox(),\r\n            pre_scale = this.transformParam.k;\r\n\r\n        if (viewBox.width > this._svgWidth || viewBox.height > this._svgHeight) {\r\n            const next_scale = Math.min((this._svgWidth - 100) / viewBox.width * pre_scale, (this._svgHeight - 100) / viewBox.height * pre_scale),\r\n                center_x = this._svgWidth / 2 - (viewBox.x + viewBox.width / 2 - this.transformParam.x) / pre_scale * next_scale,\r\n                center_y = this._svgHeight / 2 - (viewBox.y + viewBox.height / 2 - this.transformParam.y) / pre_scale * next_scale;\r\n            const t = d3.zoomIdentity.translate(center_x, center_y).scale(next_scale);\r\n            this._svg.transition().duration(750).call(this._zoom.transform, t).on('end', () => {\r\n                this.transformParam.x = t.x\r\n                this.transformParam.y = t.y;\r\n                this.transformParam.k = t.k;\r\n            });\r\n        }\r\n    }\r\n    // 自动节点聚焦\r\n    onAutoNodeFouce(source) {\r\n        const scale = this.transformParam.k,\r\n            x = -source.y,\r\n            y = -source.x;\r\n\r\n        const center_x = x * scale + this._svgWidth / 2,\r\n            center_y = y * scale + this._svgHeight / 2;\r\n        const t = d3.zoomIdentity.translate(center_x, center_y).scale(scale);\r\n        this._svg.transition()\r\n            .duration(750)\r\n            .call(this._zoom.transform, t).on('end', () => {\r\n                this.transformParam.x = t.x\r\n                this.transformParam.y = t.y;\r\n                this.transformParam.k = t.k;\r\n            });\r\n    }\r\n    // 显示右键菜单\r\n    onContextmenu = (event, d) => {\r\n        event.preventDefault()\r\n        const transform = this.transformParam\r\n\r\n        // 定位节点菜单位置\r\n        this.nodeMenuRef.setState({\r\n            nodeMenuVisible: true,\r\n            menuTransform: {\r\n                top: d.x * transform.k + transform.y + \"px\",\r\n                left: d.y * transform.k + transform.x + \"px\"\r\n            }\r\n        })\r\n    }\r\n    // 拖拽式编辑\r\n    draggable = () => {\r\n        let _this = this,\r\n            draggingTask = null,\r\n            isCircleExpanded = false;\r\n        function dragstarted(event, d) {\r\n            const { layoutSet } = _this.state\r\n            _this.dragObj.current = d;\r\n            d.dx = 0;\r\n            d.dy = 0;\r\n            // 拖拽任务开始时，高亮节点、收缩其子节点、开启节点缓冲区\r\n            draggingTask = setTimeout(() => {\r\n                _this.handleSelectNode(d, this)\r\n                d3.select(this).classed('dragging', true);\r\n                if (d.children) {\r\n                    d._children = d.children;\r\n                    d.children = null;\r\n                    _this.update(d, \"drag\");\r\n                }\r\n                _this._svgTree.selectAll('.ghost-circle')\r\n                    .filter(n => !_this.isParent(n))\r\n                    .filter(n => n !== d)\r\n                    .filter(n => n !== d.parent)\r\n                    .attr('r', 0)\r\n                    .transition()\r\n                    .duration(150)\r\n                    .attr('r', (layoutSet.nodeSpace / 2 + layoutSet.nodeSize) * 0.9)\r\n                    .on('end', () => {\r\n                        isCircleExpanded = true;\r\n                    });\r\n            }, 150);\r\n        }\r\n\r\n        function dragged(event, d) {\r\n            //移动的当前节点坐标：event的x，y是初始数据是被绑定拖拽事件节点的原位置，x轴方向向右，y轴向下\r\n            d.dx = event.x - d.x + d.y\r\n            d.dy = event.y - d.y + d.x\r\n            d3.select(this)\r\n                .attr('transform',\r\n                    `translate(${d.dx}, ${d.dy})`);\r\n\r\n            // 赋予目标节点和当前节点的坐标，用于创建缓冲区中的连线\r\n            if (_this.dragObj.current && _this.dragObj.target) {\r\n                _this.dragObj.line[0] = [\r\n                    _this.dragObj.target.y,\r\n                    _this.dragObj.target.x\r\n                ];\r\n                _this.dragObj.line[1] = [\r\n                    d.dx,\r\n                    d.dy,\r\n                ];\r\n                _this.createLink(\r\n                    {\r\n                        x: _this.dragObj.line[0][0],\r\n                        y: _this.dragObj.line[0][1]\r\n                    },\r\n                    {\r\n                        x: _this.dragObj.line[1][0],\r\n                        y: _this.dragObj.line[1][1],\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        function dragended(event, d) {\r\n            const { layoutSet, historyEdit, treeDepth } = _this.state,\r\n                e_this = this\r\n            d3.select(e_this).classed('dragging', false);\r\n            _this._svgTree.selectAll('.dragging-target').classed('dragging-target', false);\r\n\r\n            clearTimeout(draggingTask);\r\n\r\n            if (isCircleExpanded) {\r\n                _this._svgTree.selectAll('.ghost-circle')\r\n                    .filter(n => n !== d)\r\n                    .filter(n => n !== d.parent)\r\n                    .attr('r', (layoutSet.nodeSpace / 2 + layoutSet.nodeSize) * 0.9)\r\n                    .transition()\r\n                    .duration(750)\r\n                    .attr('r', 0);\r\n            }\r\n            isCircleExpanded = false;\r\n            if (_this.dragObj.current && _this.dragObj.target && !_this.isParent(d)) {\r\n                const prevParentNode = _this.dragObj.current.parent;\r\n                // 拖拽操作完成，调整节点结构\r\n                // 删除旧节点\r\n                let index = _this.dragObj.current.parent.children.indexOf(d);\r\n                if (index > -1) {\r\n                    _this.dragObj.current.parent.children.splice(index, 1);\r\n                    _this.dragObj.current.parent.data.children.splice(index, 1);\r\n                    if (_this.dragObj.current.parent.children.length === 0) {\r\n                        _this.dragObj.current.parent.children = null;\r\n                    }\r\n                }\r\n\r\n                // 新增至新节点下        \r\n                _this.dragObj.current.parent = _this.dragObj.target;\r\n                _this.dragObj.current.data.parent_id = _this.dragObj.target.data.id;\r\n                _this.dragObj.current.descendants().forEach(setDepth);\r\n                if (_this.dragObj.target.children) {\r\n                    _this.dragObj.target.children.push(_this.dragObj.current);\r\n                } else if (_this.dragObj.target._children) {\r\n                    _this.dragObj.target.children = _this.dragObj.target._children;\r\n                    _this.dragObj.target._children = null;\r\n                    _this.dragObj.target.children.push(_this.dragObj.current);\r\n                } else {\r\n                    _this.dragObj.target.children = [_this.dragObj.current];\r\n                }\r\n                _this.dragObj.target.data.children.push(_this.dragObj.current.data);\r\n\r\n                d3.select(e_this)\r\n                    .transition()\r\n                    .duration(750)\r\n                    .attr('transform', `translate(0, 0)`);\r\n                d.dx = 0;\r\n                d.dy = 0;\r\n\r\n                // Step.3 刷新\r\n                // let t = d3.zoomIdentity.translate(0, 0).scale(1)\r\n                _this.update(_this._data, \"drag\");\r\n                _this.setState({ treeDepth: getTreeMaxDepth(_this._data), historyEdit: historyEdit.concat([{ type: \"drag\", typeName: \"拖拽\", data: { prevParentNode: prevParentNode, currentNode: _this.dragObj.current, prevTreeDepth: treeDepth } }]) })\r\n                _this.removeLink();\r\n                // 将拖拽的节点坐标变为0\r\n                _this.dragObj.current = null;\r\n                _this.dragObj.target = null;\r\n                message.success('拖拽更新成功!');\r\n            } else {\r\n                recoveryNode()\r\n            }\r\n            function recoveryNode() {\r\n                _this.dragObj.target = null;\r\n                d3.select(e_this)\r\n                    .transition()\r\n                    .duration(750)\r\n                    .attr('transform', \"translate(\" + d.y + \",\" + d.x + \")\");\r\n                d.dx = 0;\r\n                d.dy = 0;\r\n\r\n                _this.removeLink();\r\n                // 将拖拽的节点坐标变为0\r\n\r\n                _this.dragObj.current = null;\r\n            }\r\n        }\r\n\r\n        return d3\r\n            .drag()\r\n            .on('start', dragstarted)\r\n            .on('drag', dragged)\r\n            .on('end', dragended);\r\n    }\r\n    _click = (d) => {\r\n        if (d.children || d._children) {\r\n            // 有子节点收缩\r\n            if (d.children) {\r\n                d._children = d.children;\r\n                d.children = null;\r\n            } else {\r\n                // 展开子节点展开\r\n                d.children = d._children;\r\n                d._children = null;\r\n            }\r\n            this.update(d, 'click');\r\n        }\r\n        if (this.state.nodeFocus) {\r\n            this.onAutoNodeFouce(d)\r\n        }\r\n    }\r\n    // 取消选择节点\r\n    handleSvgClick = (e) => {\r\n        const { selectNode } = this.state\r\n        if (selectNode) {\r\n            if (['circle', 'text'].indexOf(e.target.nodeName) === -1) {\r\n                this.cancelSelectNode()\r\n            }\r\n        }\r\n    }\r\n    // 高亮节点\r\n    handleSelectNode(node, dom) {\r\n        const { layoutSet } = this.state\r\n        const node_dom = d3.select(dom)\r\n\r\n        this.cancelSelectNode()\r\n\r\n        node_dom.selectChild(\".node-circle\")\r\n            .attr(\"r\", layoutSet.nodeSize * 1.5)\r\n            .style(\"stroke\", \"#EE1C25\")\r\n            .style(\"stroke-width\", 4)\r\n\r\n        node.selected = true\r\n        this.setState({ selectNode: { _node: node, _dom: dom } })\r\n    }\r\n\r\n    // 取消节点高亮\r\n    cancelSelectNode = () => {\r\n        const { layoutSet, selectNode, colorSet } = this.state\r\n\r\n        if (selectNode) {\r\n            if (selectNode._node.class === \"found\") {\r\n                let parent = selectNode._node;\r\n                while (parent !== null) {\r\n                    parent.class = \"\"\r\n                    parent = parent.parent;\r\n                }\r\n                this.setState({ selectNode: null })\r\n                this.updateTreeDisplay()\r\n            } else {\r\n                selectNode._node.selected = false\r\n                const node_dom = d3.select(selectNode._dom)\r\n                node_dom.selectChild(\".node-circle\")\r\n                    .attr(\"r\", layoutSet.nodeSize)\r\n                    .style(\"stroke\", colorSet.nodeColor)\r\n                    .style(\"stroke-width\", d => d._children ? 2 : 0)\r\n                this.setState({ selectNode: null })\r\n            }\r\n        }\r\n\r\n    }\r\n    // 收缩所有节点\r\n    collapseAllElements = (e) => {\r\n        if (e.children) {\r\n            if (e.depth > 0) {\r\n                e._children = e.children;\r\n                delete e.children;\r\n                e._children.forEach(e => this.collapseAllElements(e));\r\n            } else {\r\n                e.children.forEach(e => this.collapseAllElements(e));\r\n            }\r\n        }\r\n    }\r\n    // 扩展所有节点\r\n    expandAllElements = (e) => {\r\n        if (e._children) {\r\n            e.children = e._children;\r\n            delete e._children;\r\n            e.children.forEach(e => this.expandAllElements(e));\r\n        } else if (e.children) {\r\n            e.children.forEach(e => this.expandAllElements(e));\r\n        }\r\n    }\r\n    // 获取节点DOM\r\n    _getNodeRef = (source) => {\r\n        let treeNodes = this._svgTree.selectAll(\".node\")\r\n        let parentNode = null\r\n        treeNodes._groups[0].forEach(d => {\r\n            if (d.__data__.id === source.id) {\r\n                parentNode = d\r\n            }\r\n        })\r\n        return parentNode;\r\n    }\r\n    // 节点拖拽至缓冲性时设置链接\r\n    createLink(src, tar) {\r\n        let shortLine = this._svgTree.selectAll('path.short-line');\r\n        if (shortLine.size() === 0) {\r\n            this._svgTree.append('path')\r\n                .classed('short-line', true);\r\n        }\r\n        shortLine\r\n            .attr('d', d => `M ${src.x}, ${src.y} L ${tar.x} ${tar.y}`);\r\n    }\r\n    // 节点拖拽出缓冲性时设置移出链接\r\n    removeLink() {\r\n        this._svgTree.selectAll('path.short-line')\r\n            .attr('style', 'opacity:1')\r\n            .attr('d', `M ${this.dragObj.line[0][0]}, ${this.dragObj.line[0][1]} L ${this.dragObj.line[1][0]}, ${this.dragObj.line[1][1]}`)\r\n            .transition()\r\n            .duration(50)\r\n            .attr('style', 'opacity:1')\r\n            .attr('d', `M ${this.dragObj.line[0][0]}, ${this.dragObj.line[0][1]} L ${this.dragObj.line[0][0]}, ${this.dragObj.line[0][1]}`)\r\n            .remove();\r\n    }\r\n    isParent(nodeA) {\r\n        let result = false;\r\n        do {\r\n            if (nodeA.parent === this.dragObj.current) {\r\n                result = true;\r\n                break;\r\n            }\r\n            nodeA = nodeA.parent\r\n        } while (nodeA)\r\n        return result;\r\n    }\r\n    // 删除节点\r\n    handleRemoveNode = (deletedNode) => {\r\n        // 默认展开并显示\r\n        let { treeNodeCount, treeDepth, historyEdit } = this.state,\r\n            curChildrenRef = deletedNode.children || deletedNode._children,\r\n            parentChildrenRef = deletedNode.parent.children\r\n\r\n        //获取当前删除节点的索引\r\n        let index = parentChildrenRef.indexOf(deletedNode);\r\n\r\n        //删除节点\r\n        if (index > -1) {\r\n            const parentNode = deletedNode.parent,\r\n                preTreeNodeCount = treeNodeCount,\r\n                preTreeDepth = treeDepth\r\n            // 清除数据\r\n            parentChildrenRef.splice(index, 1);\r\n            deletedNode.parent.data.children.splice(index, 1);\r\n            // 保留其子节点\r\n            if (curChildrenRef) {\r\n                curChildrenRef.forEach(child => {\r\n                    child.parent = deletedNode.parent\r\n                    child.depth = deletedNode.depth\r\n                    child.data.parent_id = deletedNode.parent.data.id\r\n                    child.descendants().forEach(setDepth);\r\n                })\r\n\r\n                parentChildrenRef.push(...curChildrenRef);\r\n                deletedNode.parent.data.children.push(...deletedNode.data.children)\r\n            }\r\n            // 无子节点时，置null\r\n            if (parentChildrenRef.length === 0) {\r\n                deletedNode.parent.children = null\r\n                deletedNode.parent._children = null\r\n            }\r\n            this.cancelSelectNode()\r\n            this.setState(\r\n                {\r\n                    treeNodeCount: --treeNodeCount,\r\n                    treeDepth: getTreeMaxDepth(this._data),\r\n                    historyEdit: historyEdit.concat([{ type: \"delete\", typeName: \"删除节点\", data: { parentNode: parentNode, deletedNode: deletedNode, preTreeNodeCount, preTreeDepth } }])\r\n                }\r\n            )\r\n            this.update(deletedNode, 'remove');\r\n            message.success('删除节点成功!');\r\n        }\r\n    }\r\n    handleRemoveNodeAndChildren = (deletedNode) => {\r\n        let { treeNodeCount, treeDepth, historyEdit } = this.state,\r\n            parentChildrenRef = deletedNode.parent.children,\r\n            deleteNodesNum = 0;\r\n\r\n        let index = parentChildrenRef.indexOf(deletedNode);\r\n\r\n        if (index > -1) {\r\n            getNodeChildren(deletedNode.data, []).forEach(d => {\r\n                deleteNodesNum++\r\n            })\r\n            // 保存父节点\r\n            const parentNode = deletedNode.parent,\r\n                preTreeNodeCount = treeNodeCount,\r\n                preTreeDepth = treeDepth\r\n\r\n            parentChildrenRef.splice(index, 1);\r\n            deletedNode.parent.data.children.splice(index, 1);\r\n            // 无子节点时，清空\r\n            if (parentChildrenRef.length === 0) {\r\n                deletedNode.parent.children = null\r\n            }\r\n            this.cancelSelectNode()\r\n            this.setState({ treeNodeCount: treeNodeCount - deleteNodesNum, treeDepth: getTreeMaxDepth(this._data), historyEdit: historyEdit.concat([{ type: \"deleteSubTree\", typeName: \"删除节点及其子节点\", data: { parentNode: parentNode, deletedNode: deletedNode, preTreeNodeCount, preTreeDepth } }]) })\r\n            this.update(deletedNode, 'remove');\r\n            message.success('成功删除节点及其子节点!');\r\n        }\r\n    }\r\n    // 新增节点\r\n    handleAddNode = async (targetNode, addNodeInfo) => {\r\n        let { treeNodeCount, treeDepth, historyEdit } = this.state;\r\n        addNodeInfo.parent_id = targetNode.data.id\r\n        addNodeInfo.country_id = targetNode.data.country_id\r\n        addNodeInfo.state_id = 0\r\n        const parentNode = targetNode,\r\n            preTreeNodeCount = treeNodeCount,\r\n            preTreeDepth = treeDepth\r\n\r\n        addNodeInfo.children = []\r\n        addNodeInfo.id = treeNodeCount + 1\r\n        // 使用d3.hierarchy从对象创建节点\r\n        let newNode = d3.hierarchy(addNodeInfo)\r\n        //添加深度、高度和父节点\r\n        newNode.depth = targetNode.depth + 1\r\n        newNode.parent = targetNode\r\n\r\n        if (!targetNode.children) {\r\n            targetNode.children = targetNode._children || []\r\n            targetNode._children = null;\r\n        }\r\n        // 设置子节点\r\n        targetNode.children.push(newNode)\r\n        targetNode.data.children.push(newNode.data)\r\n        // 更新总数，层次\r\n        this.cancelSelectNode()\r\n        this.setState({ treeNodeCount: ++treeNodeCount, treeDepth: Math.max(treeDepth, newNode.depth), historyEdit: historyEdit.concat([{ type: \"add\", typeName: \"新增\", data: { parentNode: parentNode, currentNode: newNode, preTreeNodeCount, preTreeDepth } }]) })\r\n        this.update(targetNode, 'add')\r\n\r\n        return true;\r\n    }\r\n    // 更新节点信息\r\n    handleUpdateNode = async (newNodeInfo, updateNode) => {\r\n        newNodeInfo.id = updateNode.data.id\r\n        this.setState({ historyEdit: this.state.historyEdit.concat([{ type: \"update\", typeName: \"修改\", data: { prevNodeInfo: updateNode.data, currentNode: updateNode } }]) })\r\n        updateNode.data = Object.assign({}, updateNode.data, newNodeInfo)\r\n        this.cancelSelectNode()\r\n        this.updateTreeDisplay();\r\n        return true;\r\n    }\r\n    // 复制-> 粘贴节点\r\n    handlePasteNode = (targetNode, nodeInfo) => {\r\n        let copyNode = { ...nodeInfo.data },\r\n            { treeNodeCount, treeDepth, historyEdit } = this.state;\r\n\r\n        copyNode.parent_id = targetNode.data.id\r\n        copyNode.country_id = targetNode.data.country_id\r\n        copyNode.state_id = 0\r\n        copyNode.children = [] // 清空子节点\r\n\r\n        const parentNode = targetNode,\r\n            preTreeNodeCount = treeNodeCount,\r\n            preTreeDepth = treeDepth\r\n\r\n        copyNode.id = treeNodeCount + 1;\r\n        // 使用d3.hierarchy创建节点\r\n        let newNode = d3.hierarchy(copyNode);\r\n        //添加深度、高度和父节点\r\n        newNode.depth = targetNode.depth + 1;\r\n        newNode.parent = targetNode;\r\n        this.collapseAllElements(newNode)\r\n        if (!targetNode.children) {\r\n            targetNode.children = targetNode._children || []\r\n            targetNode._children = null\r\n        }\r\n        // 设置子节点\r\n        targetNode.children.push(newNode);\r\n        targetNode.data.children.push(newNode.data);\r\n        // 更新总数，层次\r\n        this.setState({\r\n            treeNodeCount: ++treeNodeCount,\r\n            treeDepth: Math.max(treeDepth, newNode.depth),\r\n            historyEdit: historyEdit.concat([{ type: \"copy\", typeName: \"复制\", data: { parentNode: parentNode, currentNode: newNode, preTreeNodeCount, preTreeDepth } }])\r\n        })\r\n        this.update(targetNode, 'add');\r\n        message.success('粘贴节点成功!');\r\n    }\r\n    // 复制节点及其子节点 -> 粘贴子树\r\n    handlePasteNodeAndChildren = (targetNode, copyNode) => {\r\n        let { treeNodeCount, treeDepth, historyEdit } = this.state,\r\n            copyNodesNum = 0,\r\n            maxDepth = 0;\r\n\r\n        const parentNode = targetNode,\r\n            preTreeNodeCount = treeNodeCount,\r\n            preTreeDepth = treeDepth\r\n\r\n        // 创建子树\r\n        let newSubTree = Object.assign({}, copyNode.data, { parent_id: targetNode.data.id })\r\n        let newNodes = d3.hierarchy(newSubTree);\r\n        newNodes.parent = targetNode;\r\n\r\n        // 计算复制节点总数，和深度\r\n        newNodes.each(d => {\r\n            d.depth = !d.parent ? 0 : d.parent.depth + 1;\r\n            maxDepth = Math.max(d.depth, treeDepth)\r\n            copyNodesNum++;\r\n        });\r\n        // 新父节点的子节点组中加入剪切节点\r\n        if (targetNode.children) {\r\n            targetNode.children.push(newNodes);\r\n        } else if (targetNode._children) {\r\n            targetNode.children = targetNode._children;\r\n            targetNode._children = null;\r\n            targetNode.children.push(newNodes);\r\n        } else {\r\n            targetNode.children = [newNodes];\r\n        }\r\n        targetNode.data.children.push(newNodes.data);\r\n        // 更新总数，层次\r\n        this.setState({ treeNodeCount: treeNodeCount + copyNodesNum, treeDepth: maxDepth, historyEdit: historyEdit.concat([{ type: \"copySubtree\", typeName: \"复制节点及其子节点\", data: { parentNode: parentNode, currentNode: newNodes, preTreeNodeCount, preTreeDepth } }]) })\r\n        this.update(targetNode, 'add');\r\n    }\r\n    // 剪切节点\r\n    handleCutNode = (d, dom) => {\r\n        const { cutNode } = this.state,\r\n            { cutNode_node, cutNode_dom } = cutNode\r\n\r\n        //this.cancelSelectNode()\r\n        if (cutNode_node) {\r\n            d3.select(cutNode_dom).classed('cutting', false);\r\n        }\r\n        d3.select(dom).classed('cutting', true);\r\n        this.setState({ cutNode: { cutNode_node: d, cutNode_dom: dom }, copyNode: null })\r\n        if (d.children) {\r\n            d._children = d.children;\r\n            d.children = null;\r\n            this.update(d);\r\n        }\r\n    }\r\n    // 剪切 -> 粘贴\r\n    handleCutPasteNode = (targetNode, { cutNode_node, cutNode_dom }) => {\r\n        let { treeDepth, historyEdit } = this.state;\r\n        if (targetNode.data.id === cutNode_node.parent.data.id) {\r\n            message.error('不能在父节点上粘贴!');\r\n            return;\r\n        }\r\n        // 记录原父节点\r\n        const prevParentNode = cutNode_node.parent;\r\n        // 关闭淡化\r\n        d3.select(cutNode_dom).classed('cutting', false);\r\n        // 删除剪切节点\r\n        //获取当前删除节点的索引\r\n        let index = cutNode_node.parent.children.indexOf(cutNode_node);\r\n        //删除节点\r\n        if (index > -1) {\r\n            cutNode_node.parent.children.splice(index, 1);\r\n            cutNode_node.parent.data.children.splice(index, 1);\r\n            if (cutNode_node.parent.children.length === 0) {\r\n                cutNode_node.parent.children = null;\r\n            }\r\n        }\r\n        // 更新剪接节点的父节点\r\n        cutNode_node.parent = targetNode;\r\n        cutNode_node.data.parent_id = targetNode.data.id\r\n        setDepth(cutNode_node)\r\n\r\n        // 新增至新节点下\r\n        if (targetNode.children) {\r\n            targetNode.children.push(cutNode_node);\r\n        } else if (targetNode._children) {\r\n            targetNode.children = targetNode._children;\r\n            targetNode._children = null;\r\n            targetNode.children.push(cutNode_node);\r\n        } else {\r\n            targetNode.children = [cutNode_node];\r\n        }\r\n        targetNode.data.children.push(cutNode_node.data)\r\n        this.cancelSelectNode()\r\n        this.setState({ cutNode: { cutNode_node: null, cutNode_dom: null }, treeDepth: getTreeMaxDepth(this._data), historyEdit: historyEdit.concat([{ type: \"cut\", typeName: \"剪切\", data: { prevParentNode: prevParentNode, currentNode: cutNode_node, prevTreeDepth: treeDepth } }]) })\r\n        this.update(this._data, \"cut\");\r\n        message.success('粘贴节点成功!');\r\n    }\r\n    // 撤回拖拽和剪切操作\r\n    handleUndoDragOrCut = (record) => {\r\n        let { prevParentNode, currentNode, prevTreeDepth } = record,\r\n            parentChildrenRef = currentNode.parent.children || currentNode.parent._children;\r\n\r\n        //获取当前删除节点的索引\r\n        let index = parentChildrenRef.indexOf(currentNode);\r\n        //删除节点\r\n        if (index > -1) {\r\n            parentChildrenRef.splice(index, 1);\r\n            currentNode.parent.data.children.splice(index, 1);\r\n            // 无子节点时，置null\r\n            if (parentChildrenRef.length === 0) {\r\n                currentNode.parent.children = null\r\n                currentNode.parent._children = null\r\n            }\r\n        }\r\n        // 拖拽操作撤回\r\n        currentNode.parent = prevParentNode;\r\n        currentNode.data.parent_id = prevParentNode.data.id\r\n        currentNode.descendants().forEach(setDepth);\r\n        // 新增至原父节点节点下\r\n        if (prevParentNode.children) {\r\n            prevParentNode.children.push(currentNode);\r\n        } else if (prevParentNode._children) {\r\n            prevParentNode.children = prevParentNode._children;\r\n            prevParentNode._children = null;\r\n            prevParentNode.children.push(currentNode);\r\n        } else {\r\n            prevParentNode.children = [currentNode];\r\n        }\r\n        prevParentNode.data.children.push(currentNode.data)\r\n        this.setState({ treeDepth: prevTreeDepth, historyEdit: this.state.historyEdit.slice(0, -1) })\r\n        this.update(this._data, 'drag');\r\n        message.success('撤回成功!');\r\n    }\r\n    // 撤回删除节点\r\n    handleUndoDeleteNode = (record) => {\r\n        let { historyEdit } = this.state,\r\n            updateChildren = [],\r\n            { parentNode, deletedNode, preTreeNodeCount, preTreeDepth } = record,\r\n            objectChildren = deletedNode.children || deletedNode._children,\r\n            parentChildren = parentNode.children || parentNode._children ? parentNode.children || parentNode._children : parentNode.children = [];\r\n\r\n        // 更新其子节点的父ID\r\n        if (objectChildren) {\r\n            objectChildren.forEach(child => {\r\n                updateChildren.push({ id: child.data.id, parent_id: deletedNode.data.id })\r\n            })\r\n        }\r\n        // 恢复节点\r\n        parentChildren.push(deletedNode)\r\n        parentNode.data.children.push(deletedNode.data)\r\n        // 恢复其所属子节点\r\n        if (objectChildren) {\r\n            objectChildren.forEach(child => {\r\n                //获取当前删除节点的索引\r\n                let index = parentChildren.indexOf(child);\r\n                //删除节点\r\n                if (index > -1) {\r\n                    parentChildren.splice(index, 1);\r\n                    parentNode.data.children.splice(index, 1);\r\n                }\r\n                child.parent = deletedNode\r\n                child.data.parent_id = deletedNode.data.id\r\n            })\r\n        }\r\n        // 设置深度\r\n        deletedNode.descendants().forEach(setDepth);\r\n        // 展开子节点\r\n        if (!deletedNode.children) {\r\n            deletedNode.children = deletedNode._children\r\n            deletedNode._children = null;\r\n        }\r\n        if (!parentNode.children) {\r\n            parentNode.children = parentNode._children\r\n            parentNode._children = null;\r\n        }\r\n        this.setState({ treeNodeCount: preTreeNodeCount, treeDepth: preTreeDepth, historyEdit: historyEdit.slice(0, -1) })\r\n        this.update(deletedNode, 'add');\r\n        message.success('撤回成功!');\r\n\r\n    }\r\n    // 撤回删除节点及其子节点\r\n    handleUndoDeleteSubTree = (record) => {\r\n        let { historyEdit } = this.state,\r\n            { parentNode, deletedNode, preTreeNodeCount, preTreeDepth } = record,\r\n            deleteNodes = [];\r\n\r\n        // 遍历节点及其子节点\r\n        getNodeChildren(deletedNode.data, []).forEach(d => {\r\n            deleteNodes.push({ id: d.id, state_id: 0 })\r\n        })\r\n        // 展开父节点\r\n        if (!parentNode.children) {\r\n            parentNode.children = parentNode._children || []\r\n            parentNode._children = null\r\n        }\r\n        // 恢复节点及其子节点\r\n        parentNode.children.push(deletedNode)\r\n        parentNode.data.children.push(deletedNode.data)\r\n\r\n        deletedNode.descendants().forEach(setDepth);\r\n\r\n        this.setState({ treeNodeCount: preTreeNodeCount, treeDepth: preTreeDepth, historyEdit: historyEdit.slice(0, -1) })\r\n        this.update(deletedNode, 'add')\r\n        message.success('撤回成功!')\r\n    }\r\n    // 撤回新增和复制节点\r\n    handleUndoAddOrCopyNode = (record) => {\r\n        let { parentNode, currentNode, preTreeNodeCount, preTreeDepth } = record,\r\n            parentChildrenRef = parentNode.children || parentNode._children;\r\n\r\n        //获取当前删除节点的索引\r\n        let index = parentChildrenRef.indexOf(currentNode);\r\n        // 清除数据\r\n        parentChildrenRef.splice(index, 1);\r\n        parentNode.data.children.splice(index, 1);\r\n        // 无子节点时，置null\r\n        if (parentChildrenRef.length === 0) {\r\n            parentNode.children = null\r\n            parentNode._children = null\r\n        }\r\n        this.setState({ treeNodeCount: preTreeNodeCount, treeDepth: preTreeDepth, historyEdit: this.state.historyEdit.slice(0, -1) })\r\n        this.update(currentNode, 'remove');\r\n        message.success('撤回成功!');\r\n    }\r\n    // 撤回复制节点及其子节点\r\n    handleUndoCopySubTree = (record) => {\r\n        let { parentNode, currentNode, preTreeNodeCount, preTreeDepth } = record,\r\n            deleteNodes = [],\r\n            parentChildrenRef = parentNode.children || parentNode._children\r\n\r\n        // 遍历节点及其子节点\r\n        getNodeChildren(currentNode.data, []).forEach(d => {\r\n            deleteNodes.push(d.id)\r\n        })\r\n        let index = parentChildrenRef.indexOf(currentNode);\r\n        parentChildrenRef.splice(index, 1);\r\n        parentNode.data.children.splice(index, 1);\r\n        // 无子节点时，清空\r\n        if (parentChildrenRef.length === 0) {\r\n            parentNode.children = null\r\n            parentNode._children = null\r\n        }\r\n        this.setState({ treeNodeCount: preTreeNodeCount, treeDepth: preTreeDepth, historyEdit: this.state.historyEdit.slice(0, -1) })\r\n        this.update(currentNode, 'remove');\r\n        message.success('撤回成功!');\r\n    }\r\n    // 撤回更新节点\r\n    handleUndoUpdateNode = (record) => {\r\n        let { prevNodeInfo, currentNode } = record\r\n        currentNode.data = Object.assign({}, currentNode.data, prevNodeInfo)\r\n        this.setState({ historyEdit: this.state.historyEdit.slice(0, -1) })\r\n        this.updateTreeDisplay();\r\n        message.success('撤回成功!');\r\n    }\r\n    handleUndo = () => {\r\n        const { historyEdit } = this.state,\r\n            lastOperation = historyEdit[historyEdit.length - 1]\r\n\r\n        if (historyEdit.length === 0) {\r\n            message.error('无历史操作记录!');\r\n            return;\r\n        }\r\n        switch (lastOperation.type) {\r\n            case \"drag\":\r\n                this.handleUndoDragOrCut(lastOperation.data)\r\n                break;\r\n            case \"delete\":\r\n                this.handleUndoDeleteNode(lastOperation.data)\r\n                break;\r\n            case \"deleteSubTree\":\r\n                this.handleUndoDeleteSubTree(lastOperation.data)\r\n                break;\r\n            case \"add\":\r\n                this.handleUndoAddOrCopyNode(lastOperation.data)\r\n                break;\r\n            case \"update\":\r\n                this.handleUndoUpdateNode(lastOperation.data)\r\n                break;\r\n            case \"copy\":\r\n                this.handleUndoAddOrCopyNode(lastOperation.data)\r\n                break;\r\n            case \"copySubtree\":\r\n                this.handleUndoCopySubTree(lastOperation.data)\r\n                break;\r\n            case \"cut\":\r\n                this.handleUndoDragOrCut(lastOperation.data)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    handleTreeSettingChange = (set, setType) => {\r\n        switch (setType) {\r\n            case 'layoutSet':\r\n                const layoutSet = { ...this.state.layoutSet }\r\n                this.setState({ layoutSet: Object.assign({}, layoutSet, { [set.layoutType]: set.value }) })\r\n                break;\r\n            case 'colorSet':\r\n                const colorSet = { ...this.state.colorSet }\r\n                this.setState({ colorSet: Object.assign({}, colorSet, { [set.colorType]: set.value }) })\r\n                break;\r\n            case 'copyNode':\r\n                const { cutNode } = this.state,\r\n                    { cutNode_node, cutNode_dom } = cutNode\r\n                if (cutNode_node) {\r\n                    d3.select(cutNode_dom).classed('cutting', false);\r\n                }\r\n                this.setState({ copyNode: set, cutNode: { cutNode_node: null, cutNode_dom: null } })\r\n                break;\r\n            case 'cutNode':\r\n                this.setState({ cutNode: { cutNode_node: set.data, cutNode_dom: set.dom } })\r\n                break;\r\n            case 'nodeFocus':\r\n                this.setState({ nodeFocus: set })\r\n                break;\r\n            case 'autoZoomTree':\r\n                this.setState({ autoZoomTree: set })\r\n                break;\r\n            case 'selectNode':\r\n                this.setState({ selectNode: set })\r\n                break;\r\n            case 'infoBarVisible':\r\n                this.setState({ infoBarVisible: set })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectNode, layoutSet, colorSet, copyNode, cutNode, cur_treeData, nodeFocus, autoZoomTree, infoBarVisible, treeNodeCount, treeDepth, historyEdit } = this.state\r\n        return (\r\n            <div ref={this.mainview} className=\"mainview\" >\r\n                <TreeStateInfoPanel\r\n                    onRef={ref => (this.infoPanelRef = ref)}\r\n                    selectNode={selectNode}\r\n                    cur_treeData={cur_treeData}\r\n                    copyNode={copyNode}\r\n                    cutNode={cutNode}\r\n                    infoBarVisible={infoBarVisible}\r\n                    treeNodeCount={treeNodeCount}\r\n                    treeDepth={treeDepth}\r\n                    onTreeSettingChange={this.handleTreeSettingChange} />\r\n                <NodeMenu\r\n                    onRef={ref => (this.nodeMenuRef = ref)}\r\n                    selectNode={selectNode}\r\n                    layoutSet={layoutSet}\r\n                    colorSet={colorSet}\r\n                    copyNode={copyNode}\r\n                    cutNode={cutNode}\r\n                    historyEdit={historyEdit}\r\n                    onAddNode={this.handleAddNode}\r\n                    onUpdateNode={this.handleUpdateNode}\r\n                    onRemoveNode={this.handleRemoveNode}\r\n                    onPasteNode={this.handlePasteNode}\r\n                    onPasteNodeAndChildren={this.handlePasteNodeAndChildren}\r\n                    onRemoveNodeAndChildren={this.handleRemoveNodeAndChildren}\r\n                    onCutNode={this.handleCutNode}\r\n                    onCutPasteNode={this.handleCutPasteNode}\r\n                    onCancelSelectNode={this.cancelSelectNode}\r\n                    onTreeSettingChange={this.handleTreeSettingChange}\r\n                    onUndo={this.handleUndo} />\r\n                <TreeSettingsPanel layoutSet={layoutSet} colorSet={colorSet} nodeFocus={nodeFocus} autoZoomTree={autoZoomTree} infoBarVisible={infoBarVisible} onTreeSettingChange={this.handleTreeSettingChange} />\r\n                <TreeIconControl\r\n                    getTreeRef={this.treeRef} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction getTreeMaxDepth(root) {\r\n    let depth = 0;\r\n    function countDepth(node) {\r\n        depth = Math.max(node.depth, depth)\r\n        if (node.children) {\r\n            node.children.forEach(countDepth);\r\n        } else if (node._children) {\r\n            node._children.forEach(countDepth);\r\n        }\r\n    }\r\n    countDepth(root)\r\n    return depth\r\n}\r\n\r\nfunction setDepth(d) {\r\n    d.depth = !d.parent ? 0 : d.parent.depth + 1;\r\n    if (d.children) {\r\n        d.children.forEach(setDepth);\r\n    } else if (d._children) {\r\n        d._children.forEach(setDepth);\r\n    }\r\n}\r\n\r\n// 返回当前子树节点数组\r\nfunction getNodeChildren(e, array) {\r\n    array.push(e)\r\n    e.children.forEach(e => getNodeChildren(e, array));\r\n    return array;\r\n}\r\nexport default Tree;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tree from './components/Tree'\nimport china from './assets/china.json'\n\n\nReactDOM.render(\n    <div className='App'>\n        <Tree treeData={china}></Tree>\n    </div>,\n    document.getElementById('root')\n);"],"sourceRoot":""}